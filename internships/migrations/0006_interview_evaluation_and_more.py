# Generated by Django 5.2 on 2025-05-08 20:39

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('internships', '0005_application_cv'),
        ('users', '0005_alter_session_token'),
    ]

    operations = [
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interview_type', models.CharField(choices=[('phone', 'Phone Screen'), ('video', 'Video Call'), ('onsite', 'On-site'), ('technical', 'Technical Test'), ('case', 'Case Study')], default='video', max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('meeting_url', models.URLField(blank=True, max_length=500, null=True)),
                ('notes', models.TextField(blank=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='internships.application')),
                ('interviewers', models.ManyToManyField(related_name='interviews_to_conduct', to='users.user')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technical_skills', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('problem_solving', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('cultural_fit', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('overall_score', models.FloatField(blank=True, null=True)),
                ('recommendation', models.CharField(choices=[('strong_yes', 'Strong Yes'), ('yes', 'Yes'), ('neutral', 'Neutral'), ('no', 'No'), ('strong_no', 'Strong No')], max_length=20)),
                ('strengths', models.TextField()),
                ('areas_for_improvement', models.TextField()),
                ('additional_comments', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='users.user')),
                ('interview', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation', to='internships.interview')),
            ],
        ),
        migrations.AddConstraint(
            model_name='interview',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__gt', models.F('start_time'))), name='end_time_after_start_time'),
        ),
        migrations.AddConstraint(
            model_name='interview',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('interview_type', 'onsite'), _negated=True), ('location__isnull', False), _connector='OR'), name='onsite_interviews_require_location'),
        ),
        migrations.AddConstraint(
            model_name='interview',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('interview_type', 'video'), _negated=True), ('meeting_url__isnull', False), _connector='OR'), name='video_interviews_require_url'),
        ),
        migrations.AlterUniqueTogether(
            name='evaluation',
            unique_together={('interview', 'evaluator')},
        ),
    ]
